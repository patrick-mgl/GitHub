import textwrap
from abc import ABC, abstractmethod, abstractproperty
from _datetime import datetime

from Codigo_Bancario_V1 import excedeu_saldo, numero_saques, excedeu_limite, excedeu_saques, extrato


class Cliente:
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []

    def realizar_transacoes(selfself, conta, transacao):
        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        self.contas.append(conta)
        print("Conta Adicionada com Sucesso")

class PessoaFisica(Cliente):
    def __init__(self, nome, dn, cpf, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.dn = dn
        self.cpf = cpf

class Conta:
    def __init__(self, numero, cliente):
        self._saldo = 0
        self._numero = numero
        self._ag = "0001"
        self._cliente = cliente
        self._historico = Historico()

    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)

    @property
    def saldo(self):
        return self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._ag

    @property
    def cliente(self):
        return self._cliente

    @property
    def historico(self):
        return self._historico

    def sacar(self, valor):
        saldo = self.saldo
        excedeu_saldo = valor > saldo

        if excedeu_saldo:
            print('Operação falhou, saldo insuficiente!')

        elif valor > 0:
            self.saldo -= valor
            print(f'Operação Realizada com Sucesso','\nSaldo atual de',{self.saldo})

        else:
            print('Operação falhou, saldo insuficiente!')

        return False

    def depositar(self, valor):
        if valor >= 0:
            self.saldo += valor
            print("Deposito realizado com sucesso",'\nSaldo atual de',{self.saldo})
        else:
            print('Operação Falhou, valor informado inválido')

class ContaCorrente(Conta):
    def __init__(self, numero, cliente, limite = 500, limite_saque = 3):
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saque = limite_saque

    def sacar(self, valor):
        numero_saques = len(
            [transacao for transacao in self.historico.transacoes
             if transacao['tipo'] == "saque"]
        )

        excedeu_limite = valor > self.limite
        excedeu_saques = numero_saques >= self.limite_saque

        if excedeu_limite:
            print("Operação falhou, limite indisponível para saque")

        if excedeu_saques:
            print("Você atingiu seu limite de saques diário")
        else:
            return super().sacar(valor)

        return False

    def __str__(self):
        return f"""\
                Agência: \t {self.agencia}
                Conta Corrente: \t {self.numero}
                Titular: \t {self.cliente.nome(PessoaFisica)}"""

class Historico:
    def __init__(self):
        self._transcoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacao(self, transacao):
        self._transcoes.append({"Tipo" : transacao.__class__.__name__, "Valor" : transacao.valor,
                                "Data": datetime.now()})

class Transacao(ABC):
    @property
    @abstractproperty
    def valor(self):
        pass

    @abstractproperty
    def registrar(self, conta):
        pass

class Saques(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self,conta):
        sucesso_transacao = conta.sacar(self)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)

class Deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor

    def valor(self):
        return self._valor

    def registrar(self,conta):
        sucesso_transacao = conta.depositar(self)

        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)

def menu():
    menu = """\n
    ================ MENU ================
    [d]\tDepositar
    [s]\tSacar
    [e]\tExtrato
    [nc]\tNova conta
    [lc]\tListar contas
    [nu]\tNovo usuário
    [q]\tSair
    => """
    return input(textwrap.dedent(menu))

def depositar(clientes):
    cpf = input("Informe o CPF do Cliente:")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente
        print("Cliente nao encontrado")
        return
    valor = float(input("Informe o valor do Depósito:"))

    transacao = Deposito(valor)

    conta = recuperar_conta_cliente(cliente)
    is not conta:
        return cliente.realizar_transacoes(conta, transacao)

def sacar(clientes):
    cpf = input("Informe o CPF do Cliente:")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente
        print("Cliente nao encontrado")
        return
    valor = float(input("Informe o valor do Saque:"))
    transacao = Saque(valor)

    conta = recuperar_conta_cliente(cliente)
    is not conta:
        return

    cliente.realizar_transacoes(conta, transacao)

def exibir_extrato(clientes):
    cpf = input("Informe o CPF (somente número): ")
    usuario = filtrar_usuario(cpf, usuarios)

    if usuario:
        print("\n@@@ Já existe usuário com esse CPF! @@@")
        return
    
    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return 
    
    print("Extrato")
    transacoes = conta.historico.transacoes
    
    if not transacoes:
        extrato = "Näo foram realizadas transacoes"
        
    else:
        for transacao in transacoes:
            extrato += f"{transacao['tipo']}: R${transacao["valor"]:.2f}"
            
    print(extrato)
    print("saldo: R$", conta(saldo))

def criar_usuario(usuarios):
    cpf = input("Informe o CPF (somente número): ")
    usuario = filtrar_usuario(cpf, usuarios)

    if usuario:
        print("\n@@@ Já existe usuário com esse CPF! @@@")
        return

    nome = input("Informe o nome completo: ")
    data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
    endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): ")

    usuarios.append({"nome": nome, "data_nascimento": data_nascimento, "cpf": cpf, "endereco": endereco})

    print("=== Usuário criado com sucesso! ===")

def filtrar_usuario(cpf, usuarios):
    usuarios_filtrados = [usuario for usuario in usuarios if usuario["cpf"] == cpf]
    return usuarios_filtrados[0] if usuarios_filtrados else None

def criar_conta(agencia, numero_conta, usuarios):
    cpf = input("Informe o CPF do usuário: ")
    usuario = filtrar_usuario(cpf, usuarios)

    if usuario:
        print("\n=== Conta criada com sucesso! ===")
        return {"agencia": agencia, "numero_conta": numero_conta, "usuario": usuario}

    print("\n@@@ Usuário não encontrado, fluxo de criação de conta encerrado! @@@")

def listar_contas(contas):
    for conta in contas:
        linha = f"""\
            Agência:\t{conta['agencia']}
            C/C:\t\t{conta['numero_conta']}
            Titular:\t{conta['usuario']['nome']}
        """
        print("=" * 100)
        print(textwrap.dedent(linha))

def main():
    clientes = []
    contas = []

    while True:
        opcao = menu()

        if opcao == "d":
            depositar(clientes)

        elif opcao == "s":
            sacar(clientes)

        elif opcao == "e":
            exibir_extrato(clientes)

        elif opcao == "nu":
            criar_usuario(clientes)

        elif opcao == "nc":
            numero_conta = len(contas) + 1
            criar_conta(numero_conta, clientes, contas)

        elif opcao == "lc":
            listar_contas(contas)

        elif opcao == "q":
            break

        else:
            print("Operação inválida, por favor selecione novamente a operação desejada.")

def filtrar_cliente(cpf, clientes):
    clientes_filtrados = [cliente for cliente in clientes if cliente.cpf == cpf]
    return clientes_filtrados[0] if clientes_filtrados else None

def recuperar_conta_cliente(cliente):
    if not cliente.contas:
        print("cliente nao possui conta!")
        return
    return cliente.contas[0]

main()
